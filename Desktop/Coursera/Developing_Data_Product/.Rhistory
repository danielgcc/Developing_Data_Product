mean(y)/mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean(y)/mean(x)
cor(y,x)
cor(x,y)
(y-0.8263*x)^2
sum((y-0.8263*x)^2)
sum((y-0.59915*x)^2)
sum((y+1.713*x)^2)
sum((y-1.713*x)^2)
sum((y+0.8263*x)^2)
mean(y)
mean(x)
lm(mean(y)~mean(x)-1)
lm(mean(y)-1~mean(x))
lm(mean(x)~mean(y)-1)
lm(x-mean(x)~y-mean(y)-1)
lm(I(x-mean(x))~I(y-mean(y))-1)
lm(I(y-mean(y))~I(x-mean(x))-1)
lm(I(y-mean(y))-1~I(x-mean(x)))
lm(y~0+x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(x~y)
fit <- lm(x~y)
coef(fit)
summary(fit)
plot(x,y)
libraray(ggplot2)
library(ggplot2)
e <- resid(fit)
e
std(e)
sd(e)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
plot(x,y,xlab="x",ylab="y",bg"lightblue",cpl="black",pch=21,frame=False)
fit <- lm(x,y)
abline(fit,lwd=2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
plot(x,y,
xlab="x",
ylab="y",
bg="lightblue",
cpl="black",pch=21,frame=False)
fit <- lm(x,y)
abline(fit,lwd=2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
plot(x,y,
xlab = "x",
ylab = "y",
bg = "lightblue",
cpl = "black",
pch=21,
frame=False)
fit <- lm(x,y)
abline(fit,lwd=2)
n <- length(x)
yhat <- predict(fit)
for (i in 1: n)
lines(c(x[i],x[i]),c(y[i],yhat[i]),col = "red",lwd = 2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
plot(x,y,
xlab = "x",
ylab = "y",
bg = "lightblue",
cpl = "black",
pch=21,
frame=False)
fit <- lm(y~x)
abline(fit,lwd=2)
n <- length(x)
yhat <- predict(fit)
for (i in 1: n)
lines(c(x[i],x[i]),c(y[i],yhat[i]),col = "red",lwd = 2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
resid(fit)
yhat <- predict(fit)
plot(x,y,
xlab = "x",
ylab = "y",
bg = "lightblue",
cpl = "black",
pch=21,
frame=False)
abline(fit,lwd=2)
n <- length(x)
for (i in 1: n)
lines(c(x[i],x[i]),c(y[i],yhat[i]),col = "red",lwd = 2)
summary(fit)
resid(fit)
summary(fit)
e <- resid(fit)
sd(e)
library(ggplot2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
sd(e)
yhat <- predict(fit)
g = ggplot(data.frame(x=x,y=y),axes(x=x,y=y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = ggplot(data.frame(x=x,y=y),aes(x=x,y=y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
library(ggplot2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
sd(e)
yhat <- predict(fit)
g = ggplot(data.frame(x=x,y=y),aes(x=x,y=y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
library(ggplot2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
sd(e)
yhat <- predict(fit)
g = ggplot(data.frame(x=x,y=y),aes(x=x,y=y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
n <- length(x)
for (i in 1: n)
lines(c(x[i],x[i]),c(y[i],yhat[i]),col = "red",lwd = 2)
e
e^2
sum(e^2)
sum(e^2)/7
sum(e^2)/6
summary(fit)$sigma
resid(fit)^2
sum(resid(fit)^2)/7
sqrt(sum(resid(fit)^2)/7)
data(mtcars)
g = ggplot(weight,mpg,data = mtcars)
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
head(mtcars)
data(mtcars)
g = ggplot(wt,mpg,data = mtcars)
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(mtcars, aes(x = wt, y = mpg))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
library(ggplot2)
library(UsingR)
fit <- lm(wt,mpg, data = mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
coef(fit)
summary(fit)
t.test(mpg ~ wt, data = mtcars)
ave(mtcar$wt)
ave(mtcars$wt)
help(mtcars)
c(-1,1)*qt(0.975,ave(mtcars$wt))
avempg <- prdict(ave(mtcars$wt))
avempg <- predict(ave(mtcars$wt))
avempg <- pred(ave(mtcars$wt))
coef(fit)
coef(fit)[1]
predict(fit,2)
predict(fit)
coef(fit)
coef(fit)[1]+coef(fit)[2]*ave(mtcars(mt))
coef(fit)[1]+coef(fit)[2]*ave(mtcars$wt))
coef(fit)[1]+coef(fit)[2]*ave(mtcars$wt)
c(-1,1)*qt(0.975,20.09062)
qt(0.975,20.09062)
qt(0.025,20.09062)
c(-1,1)*qt(0.975,20.09062)+20.09062
coef(fit)[1]+coef(fit)[2]*3
c(-1,1)*qt(0.975,32)+21.17
c(-1,1)*qt(0.975,32)+21.25
c(-1,1)*qt(0.975)+21.25
c(-1,1)*qt(0.975,2)+21.25
c(-1,1)*qt(0.975,1)+21.25
c(-1,1)*qt(0.975,2)+21.25
c(-1,1)*qt(0.975,1.5)+21.25
fit$df
c(-1,1)*qt(0.975,30)+21.25
c(-1,1)*qt(0.975,1.5)+20.09
c(-1,1)*qt(0.975,30)+20.09
fit <- lm(mpg ~ wt, data = mtcars)
coef(fit)
summary(fit)
e <- resid(fit)
sumcoef <- summary(fit)$coefficients
summcoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumcoef[1,2]
summcoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumcoef[2,2]
sumcoef <- summary(fit)$coefficients
sumcoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumcoef[1,2]
sumcoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumcoef[2,2]
summary(fit)
sumcoef <- summary(fit)$coefficients
sumcoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumcoef[1,2]
sumcoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumcoef[2,2]
sumcoef
ave(mtcars$wt)
mtcars$wt
sum(cars$wt)
sum(mtcars$wt)
sum(mtcars$wt)/length(mtcars$wt)
ave <- sum(mtcars$wt)/length(mtcars$wt)
ave
sumcoef <- summary(fit)$coefficients
sumcoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumcoef[1,2]
sumcoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumcoef[2,2]
-6.4863*ave+33.4505
yhat <- predict(fit)
wt
yhat
mtcars(mpg)
mtcars$mpg
ave(yhat)
yhat
mtcars$mpg-yhat
(mtcars$mpg-yhat)^2
sum((mtcars$mpg-yhat)^2)
sumcoef <- summary(fit)$coefficients
sumcoef
resid(fit)
sum(resid(fit))
predict?
?predict
data(mtcars)
g = ggplot(mtcars, aes(x = wt, y = mpg))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
fit <- lm(mpg ~ wt, data = mtcars)
library(datasets)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
bestmodel <- step(analysis, direction = "both")
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c("Automatic","Manual"))
summary(cars)
analysis <- aov(mpg ~ ., data = mtcars)
summary(analysis)
bestmodel <- step(analysis, direction = "both")
?step
library(shiny)
ui <- fluidpage("Hello World!")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello World!")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
)
})
library(shiny)
ui <- fluidPage(
slideInput(inputID ="10",label = "Choose a number", value = 25, min = 1)
plotOutpur("hist")
)
server <- function(input, output) {
outpur$hist <- renderPlot({
hist(rnorm(input$um))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
slideInput(inputID ="10",label = "Choose a number", value = 25, min = 1)
plotOutput("hist")
)
server <- function(input, output) {
outpur$hist <- renderPlot({
hist(rnorm(input$um))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
slideInput(inputID ="10",label = "Choose a number", value = 25, min = 1)
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$um))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputID ="10",label = "Choose a number", value = 25, min = 1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$um))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputID ="num",label = "Choose a number", value = 25, min = 1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$um))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputID ="num",label = "Choose a number", value = 25, min = 1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputID ="num",label = "Choose a number", value = 25, min = 1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputID ="num",label = "Choose a number", value = 25, min = 1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/Coursera/Developing data prodcut')
install.packages("rchart")
install.packages("rCharts")
variablenames <- read.table("./features.txt")
subtest <- read.table("./test/subject_test.txt")
xtest <- read.table("./test/X_test.txt")
ytest <- read.table("./test/y_test.txt")
subtrain <- read.table("./train/subject_train.txt")
xtrain <- read.table("./train/X_train.txt")
ytrain <- read.table("./train/y_train.txt")
datatest <- data.frame()
datatest <- rbind(datatest,subtest)
colnames(datatest) <- "Subject"
datatest["Name"] <- NA
datatest$Name <- "test"
datatest <- cbind(datatest,ytest,xtest)
colnames(datatest) <-c("Subject","Name","Activity",as.character(variablenames[,2]))
datatestf <- datatest[,c(1:3,4:9,44:49,84:89,124:129,164:169,204:205,217:218,230:231,243:244,256:257,269:274,348:353,427:432,506:507,519:520,532:533,545:546)]
datatrain <- data.frame()
datatrain <- rbind(datatrain,subtrain)
colnames(datatrain) <- "Subject"
datatrain["Name"] <- NA
datatrain$Name <- "train"
datatrain <- cbind(datatrain,ytrain,xtrain)
colnames(datatrain) <-c("Subject","Name","Activity",as.character(variablenames[,2]))
datatrainf <- datatrain[,c(1:3,4:9,44:49,84:89,124:129,164:169,204:205,217:218,230:231,243:244,256:257,269:274,348:353,427:432,506:507,519:520,532:533,545:546)]
wholedata <- data.frame()
wholedata <- rbind(wholedata,datatestf)
dim <-dim(datatrainf)
for (i in 1:dim[1]){
wholedata <- rbind(wholedata,datatrainf[i,])
}
dim2 <- dim(wholedata)
for (j in 1:dim2[1]){
if (wholedata[j,3]==1) wholedata[j,3] = "WALKING"
if (wholedata[j,3]==2) wholedata[j,3] = "WALKING_UPSTAIRS"
if (wholedata[j,3]==3) wholedata[j,3] <- "WALKING_DOWNSTAIRS"
if (wholedata[j,3]==4) wholedata[j,3] <- "SITTING"
if (wholedata[j,3]==5) wholedata[j,3] <- "STANDING"
if (wholedata[j,3]==6) wholedata[j,3] <- "LAYING"
}
tinydata <- wholedata[,c(1:3,4:6,10:12,16:18,22:24,28:30,34,36,38,40,42,44:46,50:52,56:58,62,64,66,58)]
getwd()
setwd("/Users/Daniel_Guo/Desktop/Coursera/Developing data prodcut")
getwd()
variablenames <- read.table("./UCI_HAR_Dataset/features.txt")
subtest <- read.table("./UCI_HAR_Dataset/test/subject_test.txt")
xtest <- read.table("./UCI_HAR_Dataset/test/X_test.txt")
ytest <- read.table("./UCI_HAR_Dataset/test/y_test.txt")
subtrain <- read.table("./UCI_HAR_Dataset/train/subject_train.txt")
xtrain <- read.table("./UCI_HAR_Dataset/train/X_train.txt")
ytrain <- read.table("./UCI_HAR_Dataset/train/y_train.txt")
datatest <- data.frame()
datatest <- rbind(datatest,subtest)
colnames(datatest) <- "Subject"
datatest["Name"] <- NA
datatest$Name <- "test"
datatest <- cbind(datatest,ytest,xtest)
colnames(datatest) <-c("Subject","Name","Activity",as.character(variablenames[,2]))
datatestf <- datatest[,c(1:3,4:9,44:49,84:89,124:129,164:169,204:205,217:218,230:231,243:244,256:257,269:274,348:353,427:432,506:507,519:520,532:533,545:546)]
datatrain <- data.frame()
datatrain <- rbind(datatrain,subtrain)
colnames(datatrain) <- "Subject"
datatrain["Name"] <- NA
datatrain$Name <- "train"
datatrain <- cbind(datatrain,ytrain,xtrain)
colnames(datatrain) <-c("Subject","Name","Activity",as.character(variablenames[,2]))
datatrainf <- datatrain[,c(1:3,4:9,44:49,84:89,124:129,164:169,204:205,217:218,230:231,243:244,256:257,269:274,348:353,427:432,506:507,519:520,532:533,545:546)]
wholedata <- data.frame()
wholedata <- rbind(wholedata,datatestf)
dim <-dim(datatrainf)
for (i in 1:dim[1]){
wholedata <- rbind(wholedata,datatrainf[i,])
}
dim2 <- dim(wholedata)
for (j in 1:dim2[1]){
if (wholedata[j,3]==1) wholedata[j,3] = "WALKING"
if (wholedata[j,3]==2) wholedata[j,3] = "WALKING_UPSTAIRS"
if (wholedata[j,3]==3) wholedata[j,3] <- "WALKING_DOWNSTAIRS"
if (wholedata[j,3]==4) wholedata[j,3] <- "SITTING"
if (wholedata[j,3]==5) wholedata[j,3] <- "STANDING"
if (wholedata[j,3]==6) wholedata[j,3] <- "LAYING"
}
tinydata <- wholedata[,c(1:3,4:6,10:12,16:18,22:24,28:30,34,36,38,40,42,44:46,50:52,56:58,62,64,66,58)]
head(tinydata)
getwd()
setwd("/Users/Daniel_Guo/Desktop/Coursera/Developing_Data_Product")
shiny::runApp()
head(data)
library(data.table)
library(dplyr)
library(DT)
library(rCharts)
data <- read.csv("./data/activity.csv")
head(data)
install.packages("rCharts")
install.packages("dplyr")
install.packages("dplyr")
install.packages("DT")
install.packages("data.table")
library(data.table)
library(dplyr)
library(DT)
library(rCharts)
data <- read.csv("./data/activity.csv")
head(data)
library(data.table)
library(dplyr)
library(DT)
data <- read.csv("./data/activity.csv")
head(data)
steps <- tapply(data$steps, data$date, sum, na.rm = TRUE)
steps_median <- median(steps)
steps_mean <- mean(steps)
step_median
steps_median
steps_mean
steps_by_interval<-as.data.frame(tapply(data$steps,  data$interval, sum, na.rm = TRUE))
steps_by_interval$intreval <- row.names(steps_by_interval)
names(steps_by_interval) <- c("steps","intreval")
with(steps_by_interval, plot(intreval, steps, main = "Avarage number of steps by periods",
type="l", xlab="Interval", ylab="Steps"))
shiny::runApp()
hist(steps, breaks = 10)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
